{"version":3,"file":"main.js","sources":["../node_modules/crypto-random-string/index.js","../lib/config.ts","../lib/main.ts","../lib/workerHelper.ts"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst crypto = require('crypto');\n\nconst randomBytesAsync = promisify(crypto.randomBytes);\n\nconst urlSafeCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~'.split('');\nconst numericCharacters = '0123456789'.split('');\nconst distinguishableCharacters = 'CDEHKMPRTUWXY012458'.split('');\nconst asciiPrintableCharacters = '!\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'.split('');\nconst alphanumericCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.split('');\n\nconst generateForCustomCharacters = (length, characters) => {\n\t// Generating entropy is faster than complex math operations, so we use the simplest way\n\tconst characterCount = characters.length;\n\tconst maxValidSelector = (Math.floor(0x10000 / characterCount) * characterCount) - 1; // Using values above this will ruin distribution when using modular division\n\tconst entropyLength = 2 * Math.ceil(1.1 * length); // Generating a bit more than required so chances we need more than one pass will be really low\n\tlet string = '';\n\tlet stringLength = 0;\n\n\twhile (stringLength < length) { // In case we had many bad values, which may happen for character sets of size above 0x8000 but close to it\n\t\tconst entropy = crypto.randomBytes(entropyLength);\n\t\tlet entropyPosition = 0;\n\n\t\twhile (entropyPosition < entropyLength && stringLength < length) {\n\t\t\tconst entropyValue = entropy.readUInt16LE(entropyPosition);\n\t\t\tentropyPosition += 2;\n\t\t\tif (entropyValue > maxValidSelector) { // Skip values which will ruin distribution when using modular division\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstring += characters[entropyValue % characterCount];\n\t\t\tstringLength++;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst generateForCustomCharactersAsync = async (length, characters) => {\n\t// Generating entropy is faster than complex math operations, so we use the simplest way\n\tconst characterCount = characters.length;\n\tconst maxValidSelector = (Math.floor(0x10000 / characterCount) * characterCount) - 1; // Using values above this will ruin distribution when using modular division\n\tconst entropyLength = 2 * Math.ceil(1.1 * length); // Generating a bit more than required so chances we need more than one pass will be really low\n\tlet string = '';\n\tlet stringLength = 0;\n\n\twhile (stringLength < length) { // In case we had many bad values, which may happen for character sets of size above 0x8000 but close to it\n\t\tconst entropy = await randomBytesAsync(entropyLength); // eslint-disable-line no-await-in-loop\n\t\tlet entropyPosition = 0;\n\n\t\twhile (entropyPosition < entropyLength && stringLength < length) {\n\t\t\tconst entropyValue = entropy.readUInt16LE(entropyPosition);\n\t\t\tentropyPosition += 2;\n\t\t\tif (entropyValue > maxValidSelector) { // Skip values which will ruin distribution when using modular division\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tstring += characters[entropyValue % characterCount];\n\t\t\tstringLength++;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst generateRandomBytes = (byteLength, type, length) => crypto.randomBytes(byteLength).toString(type).slice(0, length);\n\nconst generateRandomBytesAsync = async (byteLength, type, length) => {\n\tconst buffer = await randomBytesAsync(byteLength);\n\treturn buffer.toString(type).slice(0, length);\n};\n\nconst allowedTypes = [\n\tundefined,\n\t'hex',\n\t'base64',\n\t'url-safe',\n\t'numeric',\n\t'distinguishable',\n\t'ascii-printable',\n\t'alphanumeric'\n];\n\nconst createGenerator = (generateForCustomCharacters, generateRandomBytes) => ({length, type, characters}) => {\n\tif (!(length >= 0 && Number.isFinite(length))) {\n\t\tthrow new TypeError('Expected a `length` to be a non-negative finite number');\n\t}\n\n\tif (type !== undefined && characters !== undefined) {\n\t\tthrow new TypeError('Expected either `type` or `characters`');\n\t}\n\n\tif (characters !== undefined && typeof characters !== 'string') {\n\t\tthrow new TypeError('Expected `characters` to be string');\n\t}\n\n\tif (!allowedTypes.includes(type)) {\n\t\tthrow new TypeError(`Unknown type: ${type}`);\n\t}\n\n\tif (type === undefined && characters === undefined) {\n\t\ttype = 'hex';\n\t}\n\n\tif (type === 'hex' || (type === undefined && characters === undefined)) {\n\t\treturn generateRandomBytes(Math.ceil(length * 0.5), 'hex', length); // Need 0.5 byte entropy per character\n\t}\n\n\tif (type === 'base64') {\n\t\treturn generateRandomBytes(Math.ceil(length * 0.75), 'base64', length); // Need 0.75 byte of entropy per character\n\t}\n\n\tif (type === 'url-safe') {\n\t\treturn generateForCustomCharacters(length, urlSafeCharacters);\n\t}\n\n\tif (type === 'numeric') {\n\t\treturn generateForCustomCharacters(length, numericCharacters);\n\t}\n\n\tif (type === 'distinguishable') {\n\t\treturn generateForCustomCharacters(length, distinguishableCharacters);\n\t}\n\n\tif (type === 'ascii-printable') {\n\t\treturn generateForCustomCharacters(length, asciiPrintableCharacters);\n\t}\n\n\tif (type === 'alphanumeric') {\n\t\treturn generateForCustomCharacters(length, alphanumericCharacters);\n\t}\n\n\tif (characters.length === 0) {\n\t\tthrow new TypeError('Expected `characters` string length to be greater than or equal to 1');\n\t}\n\n\tif (characters.length > 0x10000) {\n\t\tthrow new TypeError('Expected `characters` string length to be less or equal to 65536');\n\t}\n\n\treturn generateForCustomCharacters(length, characters.split(''));\n};\n\nmodule.exports = createGenerator(generateForCustomCharacters, generateRandomBytes);\nmodule.exports.async = createGenerator(generateForCustomCharactersAsync, generateRandomBytesAsync);\n","export const config = {\n  \"enableSemanticRules\": {\n    \"type\": \"boolean\",\n    \"title\": \"Enable semantic rules\",\n    \"description\": \"Allow passing a TypeScript program object to the linter. May negatively affect performance. See this page for details: https://palantir.github.io/tslint/usage/type-checking/\",\n    \"default\": false,\n    \"order\": 1\n  },\n  \"rulesDirectory\": {\n    \"type\": \"string\",\n    \"title\": \"Custom rules directory (absolute path)\",\n    \"default\": \"\",\n    \"order\": 2\n  },\n  \"fixOnSave\": {\n    \"title\": \"Fix errors on save\",\n    \"description\": \"Have tslint attempt to fix some errors automatically when saving the file.\",\n    \"type\": \"boolean\",\n    \"default\": false,\n    \"order\": 3\n  },\n  \"ignoreTypings\": {\n    \"type\": \"boolean\",\n    \"title\": \"Ignore typings files (.d.ts)\",\n    \"default\": false,\n    \"order\": 4\n  },\n  \"useLocalTslint\": {\n    \"type\": \"boolean\",\n    \"title\": \"Try to use the project's local tslint package, if it exists\",\n    \"default\": true,\n    \"order\": 5\n  },\n  \"useGlobalTslint\": {\n    \"type\": \"boolean\",\n    \"title\": \"Use the global tslint install\",\n    \"description\": \"If enabled, the global tslint installation will be used as a fallback, instead of the version packaged with linter-tslint.\",\n    \"default\": false,\n    \"order\": 6\n  },\n  \"globalNodePath\": {\n    \"type\": \"string\",\n    \"title\": \"Global node installation path\",\n    \"description\": \"The location of your global npm install. (Will default to `npm get prefix`.)\",\n    \"default\": \"\",\n    \"order\": 7\n  }\n}\n\nexport interface ConfigSchema {\n  enableSemanticRules: boolean,\n  rulesDirectory: string | null,\n  fixOnSave: boolean,\n  ignoreTypings: boolean,\n  useLocalTslint: boolean,\n  useGlobalTslint: boolean,\n  globalNodePath: string | null,\n}\n\nexport const defaultConfig = Object.freeze({\n  enableSemanticRules: false,\n  rulesDirectory: \"\",\n  fixOnSave: false,\n  ignoreTypings: false,\n  useLocalTslint: true,\n  useGlobalTslint: false,\n  globalNodePath: \"\",\n} as const)\n","import { CompositeDisposable, TextEditor } from 'atom';\nimport path from 'path';\nimport { promises } from 'fs';\nconst { stat } = promises;\nimport { WorkerHelper } from './workerHelper';\nimport { defaultConfig, ConfigSchema } from \"./config\"\n\nconst grammarScopes = ['source.ts', 'source.tsx'];\nconst editorClass = 'linter-tslint-compatible-editor';\nconst idleCallbacks = new Set();\nconst config: ConfigSchema = { ...defaultConfig } // copy of default config\n\n// Worker still hasn't initialized, since the queued idle callbacks are\n// done in order, waiting on a newly queued idle callback will ensure that\n// the worker has been initialized\nfunction waitOnIdle() {\n  return new Promise((resolve) => {\n    const callbackID = window.requestIdleCallback(() => {\n      idleCallbacks.delete(callbackID);\n      resolve(true);\n    });\n    idleCallbacks.add(callbackID);\n  });\n};\n\nconst subscriptions = new CompositeDisposable();\nconst workerHelper = new WorkerHelper();\n\nexport function activate() {\n  const depsCallbackID = window.requestIdleCallback(() => {\n    idleCallbacks.delete(depsCallbackID);\n    // Install package dependencies\n    require('atom-package-deps').install('linter-tslint');\n  });\n  idleCallbacks.add(depsCallbackID);\n\n\n  // Config subscriptions\n  subscriptions.add(\n    atom.config.observe('linter-tslint.rulesDirectory', async (dir) => {\n      if (dir && path.isAbsolute(dir)) {\n        const stats = await stat(dir);\n        if (stats && stats.isDirectory()) {\n          config.rulesDirectory = dir;\n          workerHelper.changeConfig('rulesDirectory', dir);\n        }\n      }\n    }),\n    atom.config.observe('linter-tslint.useLocalTslint', (use) => {\n      config.useLocalTslint = use;\n      workerHelper.changeConfig('useLocalTslint', use);\n    }),\n    atom.config.observe('linter-tslint.enableSemanticRules', (enableSemanticRules) => {\n      config.enableSemanticRules = enableSemanticRules;\n      workerHelper.changeConfig('enableSemanticRules', enableSemanticRules);\n    }),\n    atom.config.observe('linter-tslint.useGlobalTslint', (use) => {\n      config.useGlobalTslint = use;\n      workerHelper.changeConfig('useGlobalTslint', use);\n    }),\n    atom.config.observe('linter-tslint.globalNodePath', (globalNodePath) => {\n      config.globalNodePath = globalNodePath;\n      workerHelper.changeConfig('globalNodePath', globalNodePath);\n    }),\n    atom.config.observe('linter-tslint.ignoreTypings', (ignoreTypings) => {\n      config.ignoreTypings = ignoreTypings;\n    }),\n    atom.workspace.observeTextEditors((textEditor) => {\n      // Marks each TypeScript editor with a CSS class so that\n      // we can enable commands only for TypeScript editors.\n      const rootScopes = textEditor.getRootScopeDescriptor().getScopesArray();\n      if (rootScopes.some((scope) => grammarScopes.includes(scope))) {\n        atom.views.getView(textEditor).classList.add(editorClass);\n        textEditor.onDidSave(async () => {\n          if (atom.config.get('linter-tslint.fixOnSave')) {\n            if (!workerHelper.isRunning()) {\n              // Wait for worker to initialize\n              await waitOnIdle();\n            }\n\n            await workerHelper.requestJob('fix', textEditor);\n          }\n        });\n      }\n    }),\n    atom.commands.add(`atom-text-editor.${editorClass}`, {\n      // Command subscriptions\n      'linter-tslint:fix-file': async () => {\n        const textEditor = atom.workspace.getActiveTextEditor();\n\n        if (!textEditor || textEditor.isModified()) {\n          // Abort for invalid or unsaved text editors\n          atom.notifications.addError('Linter-TSLint: Please save before fixing');\n          return;\n        }\n\n        // The fix replaces the file content and the cursor can jump automatically\n        // to the beginning of the file, so save current cursor position\n        const cursorPosition = textEditor.getCursorBufferPosition();\n\n        try {\n          const results = await workerHelper.requestJob('fix', textEditor);\n\n          const notificationText = results && results.length === 0\n            ? 'Linter-TSLint: Fix complete.'\n            : 'Linter-TSLint: Fix attempt complete, but linting errors remain.';\n\n          atom.notifications.addSuccess(notificationText);\n        } catch (err) {\n          atom.notifications.addWarning(err.message);\n        } finally {\n          // Restore cursor to the position before fix job\n          textEditor.setCursorBufferPosition(cursorPosition);\n        }\n      },\n    }),\n  );\n\n  const createWorkerCallback = window.requestIdleCallback(() => {\n    workerHelper.startWorker(config);\n    idleCallbacks.delete(createWorkerCallback);\n  });\n  idleCallbacks.add(createWorkerCallback);\n}\n\nexport function deactivate() {\n  idleCallbacks.forEach((callbackID) => window.cancelIdleCallback(callbackID));\n  idleCallbacks.clear();\n  subscriptions.dispose();\n\n  workerHelper.terminateWorker();\n}\n\nexport function provideLinter() {\n  return {\n    name: 'TSLint',\n    grammarScopes,\n    scope: 'file',\n    lintsOnChange: true,\n    lint: async (textEditor: TextEditor) => {\n      if (config.ignoreTypings && (textEditor.getPath() ?? \"\").toLowerCase().endsWith('.d.ts')) {\n        return [];\n      }\n\n      if (!workerHelper.isRunning()) {\n        // Wait for worker to initialize\n        await waitOnIdle();\n      }\n\n      const text = textEditor.getText();\n      const results = await workerHelper.requestJob('lint', textEditor);\n\n      if (textEditor.getText() !== text) {\n        // Text has been modified since the lint was triggered, tell linter not to update\n        return null;\n      }\n\n      return results;\n    },\n  };\n}\n\nexport { config } from './config';\n","import { Task, TextEditor } from 'atom';\nimport type { ConfigSchema } from \"./config\"\nimport cryptoRandomString from 'crypto-random-string';\nimport type * as Tslint from \"tslint\";\n\nexport class WorkerHelper {\n  workerInstance: Task | null\n  constructor() {\n    this.workerInstance = null;\n  }\n\n  isRunning() {\n    return Boolean(this.workerInstance);\n  }\n\n  startWorker(config: ConfigSchema) {\n    if (!this.workerInstance) {\n      this.workerInstance = new Task(require.resolve('./worker.js'));\n      this.workerInstance.start(config);\n    }\n  }\n\n  terminateWorker() {\n    if (this.workerInstance) {\n      this.workerInstance.terminate();\n      this.workerInstance = null;\n    }\n  }\n\n  changeConfig(key: string, value: any) {\n    if (this.workerInstance) {\n      this.workerInstance.send({\n        messageType: 'config',\n        message: { key, value },\n      } as ConfigMessage);\n    }\n  }\n\n  async requestJob(jobType: string, textEditor: TextEditor): Promise<Tslint.LintResult[]> {\n    if (this.workerInstance === null) {\n      throw new Error(\"Worker hasn't started\");\n    }\n\n    const emitKey = await cryptoRandomString.async({ length: 10 });\n\n    return new Promise((resolve, reject) => {\n      if (this.workerInstance === null) {\n        throw new Error(\"Worker hasn't started\");\n      }\n      const errSub = this.workerInstance.on('task:error', (...err) => {\n        // Re-throw errors from the task\n        const error = new Error(err[0]);\n        // Set the stack to the one given to us by the worker\n        [, error.stack] = err;\n        reject(error);\n      });\n\n      const responseSub = this.workerInstance.on(emitKey, (data: Tslint.LintResult[]) => {\n        errSub.dispose();\n        responseSub.dispose();\n        resolve(data);\n      });\n\n      try {\n        this.workerInstance.send({\n          messageType: 'job',\n          message: {\n            emitKey,\n            jobType,\n            content: textEditor.getText(),\n            filePath: textEditor.getPath(),\n          },\n        } as JobMessage);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n\nexport type ConfigMessage = {\n  messageType: 'config',\n  message: {\n    key: keyof ConfigSchema,\n    value: boolean | string | null,\n  }\n}\n\nexport type JobMessage = {\n  messageType: 'job',\n  message: {\n    emitKey: string,\n    jobType: string,\n    content: ReturnType<TextEditor[\"getText\"]>,\n    filePath: ReturnType<TextEditor[\"getPath\"]>,\n  }\n}\n"],"names":["promisify","require$$0","randomBytesAsync","crypto","randomBytes","urlSafeCharacters","split","numericCharacters","distinguishableCharacters","asciiPrintableCharacters","alphanumericCharacters","allowedTypes","undefined","createGenerator","generateForCustomCharacters","generateRandomBytes","length","type","characters","Number","isFinite","TypeError","includes","Math","ceil","characterCount","maxValidSelector","floor","entropyLength","string","stringLength","entropy","entropyPosition","entropyValue","readUInt16LE","byteLength","toString","slice","async","defaultConfig","Object","freeze","enableSemanticRules","rulesDirectory","fixOnSave","ignoreTypings","useLocalTslint","useGlobalTslint","globalNodePath","stat","promises","grammarScopes","idleCallbacks","Set","config","waitOnIdle","Promise","resolve","callbackID","window","requestIdleCallback","delete","add","subscriptions","CompositeDisposable","workerHelper","[object Object]","this","workerInstance","Boolean","Task","require","start","terminate","key","value","send","messageType","message","jobType","textEditor","Error","emitKey","cryptoRandomString","reject","errSub","on","err","error","stack","responseSub","data","dispose","content","getText","filePath","getPath","e","depsCallbackID","install","atom","observe","dir","path","isAbsolute","stats","isDirectory","changeConfig","use","workspace","observeTextEditors","getRootScopeDescriptor","getScopesArray","some","scope","views","getView","classList","onDidSave","get","isRunning","requestJob","commands","linter-tslint:fix-file","getActiveTextEditor","isModified","notifications","addError","cursorPosition","getCursorBufferPosition","results","notificationText","addSuccess","addWarning","setCursorBufferPosition","createWorkerCallback","startWorker","title","description","default","order","forEach","cancelIdleCallback","clear","terminateWorker","name","lintsOnChange","lint","toLowerCase","endsWith","text"],"mappings":"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"}